@model FinancePlanning.Presentation.Areas.Forecasting.ViewModels.InvestmentPredictionViewModel
@inject FinancePlanning.Infrastructure.Interfaces.ICurrencyFormatter CurrencyFormatter

<div class="mt-5" id="results">
    <h4><i class="bi bi-graph-up"></i> Simulation Results</h4>

    <div class="mt-3 d-flex gap-2">
        <form asp-action="ExportPdf" method="post">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Principal)
            @Html.HiddenFor(m => m.MonthlyContribution)
            @Html.HiddenFor(m => m.Years)
            @Html.HiddenFor(m => m.TotalExpenseRatio)
            @Html.HiddenFor(m => m.Correlation)
            @Html.HiddenFor(m => m.SimulationsCount)
            @Html.HiddenFor(m => m.TargetAmount)
            @Html.HiddenFor(m => m.SelectedCurrency)
            @Html.HiddenFor(m => m.InflationRate)

            @for (int i = 0; i < Model.PortfolioItems.Count; i++)
            {
                <input type="hidden" name="PortfolioItems[@i].AssetName" value="@Model.PortfolioItems[i].AssetName" />
                <input type="hidden" name="PortfolioItems[@i].ExpectedReturn" value="@Model.PortfolioItems[i].ExpectedReturn" />
                <input type="hidden" name="PortfolioItems[@i].Weight" value="@Model.PortfolioItems[i].Weight" />
                <input type="hidden" name="PortfolioItems[@i].StandardDeviation" value="@Model.PortfolioItems[i].StandardDeviation" />
                <input type="hidden" name="PortfolioItems[@i].SelectedVolatilityLevel" value="@Model.PortfolioItems[i].SelectedVolatilityLevel" />
            }

            <button type="submit" class="btn btn-outline-primary">
                <i class="bi bi-file-earmark-pdf"></i> Export to PDF
            </button>
        </form>

        <form asp-action="ExportXml" method="post">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Principal)
            @Html.HiddenFor(m => m.MonthlyContribution)
            @Html.HiddenFor(m => m.Years)
            @Html.HiddenFor(m => m.TotalExpenseRatio)
            @Html.HiddenFor(m => m.Correlation)
            @Html.HiddenFor(m => m.SimulationsCount)
            @Html.HiddenFor(m => m.TargetAmount)
            @Html.HiddenFor(m => m.SelectedCurrency)
            @Html.HiddenFor(m => m.InflationRate)

            @for (int i = 0; i < Model.PortfolioItems.Count; i++)
            {
                <input type="hidden" name="PortfolioItems[@i].AssetName" value="@Model.PortfolioItems[i].AssetName" />
                <input type="hidden" name="PortfolioItems[@i].ExpectedReturn" value="@Model.PortfolioItems[i].ExpectedReturn" />
                <input type="hidden" name="PortfolioItems[@i].Weight" value="@Model.PortfolioItems[i].Weight" />
                <input type="hidden" name="PortfolioItems[@i].StandardDeviation" value="@Model.PortfolioItems[i].StandardDeviation" />
                <input type="hidden" name="PortfolioItems[@i].SelectedVolatilityLevel" value="@Model.PortfolioItems[i].SelectedVolatilityLevel" />
            }

            <button type="submit" class="btn btn-outline-secondary">
                <i class="bi bi-file-earmark-code"></i> Export to XML
            </button>
        </form>
    </div>

    @if (Model.Result.ReachedMaxValue)
    {
        <div class="alert alert-warning mt-3">
            <i class="bi bi-exclamation-triangle"></i>
            Some simulations have reached the maximum supported value for calculations.
        </div>
    }

    <div class="card border-primary mb-4 mt-3">
        <div class="card-body">
            <h4>
                <i class="bi bi-currency-dollar"></i> Nominal Results
                <i class="bi bi-info-circle text-secondary ms-1" data-bs-toggle="tooltip"
                   title="Nominal results represent values before inflation adjustment. These are used for the chart and commentary."></i>
            </h4>

            <p class="mb-2">
                <strong>
                    @{
                        var contribution = Model.Principal + Model.MonthlyContribution * Model.Years * 12;
                    }
                    Own contributions:
                </strong>
                @CurrencyFormatter.Format(contribution, Model.SelectedCurrency)
            </p>

            <p class="mb-2"><strong>10th Percentile:</strong> @CurrencyFormatter.Format(Model.Result.Percentile10, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>Median (50th):</strong> @CurrencyFormatter.Format(Model.Result.Percentile50, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>90th Percentile:</strong> @CurrencyFormatter.Format(Model.Result.Percentile90, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>Average:</strong> @CurrencyFormatter.Format(Model.Result.AverageFinalValue, Model.SelectedCurrency)</p>

            @if (Model.Result.TargetReachedProbability.HasValue)
            {
                <p class="mb-0"><strong>Chance to reach target:</strong> @Model.Result.TargetReachedProbability.Value.ToString("0.0")%</p>
            }

            <div class="alert alert-info mt-4">@Model.GetBehavioralCommentary()</div>
        </div>
    </div>

    <div class="card border-secondary mb-4">
        <div class="card-body">
            <h5>
                <i class="bi bi-graph-down-arrow"></i> Real Results (Adjusted for Inflation)
                <i class="bi bi-info-circle text-secondary ms-1" data-bs-toggle="tooltip"
                   title="These values are adjusted for inflation and represent the purchasing power of the future amount."></i>
            </h5>

            <p class="mb-2"><strong>Real 10th Percentile:</strong> @CurrencyFormatter.Format(Model.Result.RealPercentile10, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>Real Median (50th):</strong> @CurrencyFormatter.Format(Model.Result.RealPercentile50, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>Real 90th Percentile:</strong> @CurrencyFormatter.Format(Model.Result.RealPercentile90, Model.SelectedCurrency)</p>
            <p class="mb-2"><strong>Real Average:</strong> @CurrencyFormatter.Format(Model.Result.RealAverageFinalValue, Model.SelectedCurrency)</p>
        </div>
    </div>

    <div class="row gy-4">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    Distribution (Histogram)
                    <i class="bi bi-info-circle text-secondary ms-1" data-bs-toggle="tooltip"
                       title="The chart shows the spread of all final investment values before inflation."></i>
                </div>
                <div class="card-body" id="histogramContainer" style="height: 400px;"></div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    Sample Trajectories
                    <i class="bi bi-info-circle text-secondary ms-1" data-bs-toggle="tooltip"
                       title="These trajectories represent example paths of investment before inflation. Real results are typically lower."></i>
                </div>
                <div class="card-body" id="trajectoryContainer" style="height: 400px;"></div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h5>Detailed Percentiles</h5>
        <table class="table table-bordered table-sm">
            <thead class="table-light">
                <tr>
                    <th>Scenario</th>
                    <th>Percentile</th>
                    <th>Final Value</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>Very Pessimistic</td><td>5th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile5, Model.SelectedCurrency)</td></tr>
                <tr class="table-danger"><td>Pessimistic</td><td>10th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile10, Model.SelectedCurrency)</td></tr>
                <tr><td>Below Median</td><td>25th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile25, Model.SelectedCurrency)</td></tr>
                <tr class="table-info"><td>Median</td><td>50th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile50, Model.SelectedCurrency)</td></tr>
                <tr><td>Above Median</td><td>75th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile75, Model.SelectedCurrency)</td></tr>
                <tr class="table-success"><td>Optimistic</td><td>90th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile90, Model.SelectedCurrency)</td></tr>
                <tr><td>Very Optimistic</td><td>95th</td><td>@CurrencyFormatter.Format(Model.Result.Percentile95, Model.SelectedCurrency)</td></tr>
            </tbody>
        </table>
    </div>
</div>
