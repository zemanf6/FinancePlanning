@model FinancePlanning.Presentation.Areas.Calculators.ViewModels.CompoundInterestViewModel
@inject ICurrencyFormatter CurrencyFormatter
@using FinancePlanning.Infrastructure.Interfaces
@using System.Text.Json

@{
    ViewData["Title"] = "Simple Interest Calculator";
    var options = new JsonSerializerOptions { 
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };
}

<div class="container mt-4">
    <h2 class="mb-4">Simple Interest Calculator</h2>

    @if (!ViewData.ModelState.IsValid && ViewData.ModelState[string.Empty]?.Errors.Count > 0)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState[string.Empty]!.Errors)
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }

    @if (TempData["Success"] is string successMessage)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (User.Identity?.IsAuthenticated == true)
    {
        <div class="mb-3">
            <a asp-action="Saved" class="btn btn-outline-primary">
                <i class="bi bi-folder"></i> View Saved Calculations
            </a>
        </div>
    }

    <form asp-action="Index" method="post">
        @Html.AntiForgeryToken()
        @await Html.PartialAsync("_CalculatorForm", Model)
    </form>

    @await Html.PartialAsync("_CalculatorResults", Model)
    @await Html.PartialAsync("_CalculatorSaveForm", Model)
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        window.calculationData = {
            principal: @Html.Raw(JsonSerializer.Serialize(Model.Principal)),
            interest: @Html.Raw(JsonSerializer.Serialize(Model.CalculatedInterest)),
            chartData: @Html.Raw(JsonSerializer.Serialize(Model.ChartData ?? new(), options))
                };
        window.autoCalculateAfterLoad = @((TempData["Result"] != null).ToString().ToLower());
    </script>
    <script src="~/js/calculators/calculatorResults.js"></script>
}
