@model FinancePlanning.Presentation.Areas.Forecasting.ViewModels.InvestmentPredictionViewModel
@inject FinancePlanning.Infrastructure.Interfaces.ICurrencyFormatter CurrencyFormatter
@using System.Text.Json

@{
    ViewData["Title"] = "Investment Prediction";
}

<div class="container mt-4">
    <h2 class="mb-4">Investment Prediction (Monte Carlo Simulation)</h2>

    @if (!ViewData.ModelState.IsValid &&
    ViewData.ModelState.Values.Any(v => v.Errors.Count > 0 && string.IsNullOrEmpty(v.Errors.FirstOrDefault()?.Exception?.Message)))
    {
        <div asp-validation-summary="All" class="alert alert-danger small"></div>
    }

    <form asp-action="Index" method="post" id="predictionForm" novalidate>
        @Html.AntiForgeryToken()

        @await Html.PartialAsync("_InvestmentForm", Model)
        @await Html.PartialAsync("_PortfolioTable", Model.PortfolioItems)

        <div class="mt-4 d-flex justify-content-end">
            <button type="submit"
                    id="simulateBtn"
                    class="btn btn-success btn-lg shadow-sm"
                    onclick="onSimulateClick()">
                <span class="spinner-border spinner-border-sm me-2 d-none"
                      id="simulateSpinner" role="status" aria-hidden="true"></span>
                <i class="bi bi-bar-chart-line"></i> Simulate
            </button>
        </div>
    </form>

    @if (Model.Result != null)
    {
        @await Html.PartialAsync("_SimulationResults", Model)
    }
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0/dist/chartjs-plugin-annotation.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js"></script>

    <script>
        window.predictionResult = @Html.Raw(
        JsonSerializer.Serialize(
        Model.Result ?? new FinancePlanning.Application.DTOs.SimulationResultDto(),
        new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }
        )
        );
    </script>

    <script src="~/js/forecasting/portfolio.js"></script>
    <script src="~/js/forecasting/investmentPrediction.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            initCurrencyDropdown();
            renderHistogram();
            renderTrajectories();
            scrollToResultsIfAvailable();
            initTooltips();
        });
    </script>

    <script>
        window.predictionResult = @Html.Raw(JsonSerializer.Serialize(Model.Result ?? new(), new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }));
        window.predictionResult.principal = @Model.Principal;
        window.predictionResult.monthlyContribution = @Model.MonthlyContribution;
        window.predictionResult.years = @Model.Years;
    </script>

}

